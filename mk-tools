#!/bin/bash
#################################################
#	Title:	01-mk-tools			#
#        Date:	2021-04-29			#
#     Version:	1.0				#
#      Author:	baho-utot@columbus.rr.com	#
#     Options:					#
# Modified by:	xhaa123@163.com			#
#################################################
#[ -z ${PARENT} ]	&& PARENT=/usr/src/Octothorpe
#[ -z ${LFS} ]		&& LFS=/mnt/lfs

set -o errexit		# exit if error...insurance ;)
set -o nounset		# exit if variable not initalized
set +h			# disable hashall
source config.inc
source function.inc
PRGNAME=${0##*/}	# script name minus the path

tools_binutils_pass1() {
	local	_pkgname="binutils"
	local	_pkgver="2.26.1"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Create work directory" "install -vdm 755 ../build" ${_logfile}
	build "	Change directory: ../build" "pushd ../build" ${_logfile}
	build "	Configure" "../${_pkgname}-${_pkgver}/configure --prefix=/tools --with-sysroot=${LFS} --with-lib-path=/tools/lib --target=${LFS_TGT} --disable-nls --disable-werror" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	[ "x86_64" == $(uname -m) ] && build "	Create symlink for amd64" "mkdir -v /tools/lib && ln -sv lib /tools/lib64 " ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_gcc_pass1() {
	local	_pkgname="gcc"
	local	_pkgver="10.3.0"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	local	_pwd=${PWD}/BUILD
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	build "	Create work directory" "install -vdm 755 build" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	unpack "${PWD}" "mpfr-4.1.0"
	unpack "${PWD}" "gmp-6.2.1"
	unpack "${PWD}" "mpc-1.2.1"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Symlinking gmp" " ln -vs ../gmp-6.2.1  gmp" ${_logfile}
	build "	Symlinking mpc" " ln -vs ../mpc-1.2.1  mpc" ${_logfile}
	build "	Symlinking mpfr" "ln -vs ../mpfr-4.1.0 mpfr" ${_logfile}
	build "	Change the location of GCC's default dynamic linker"
"for file in gcc/config/{linux,i386/linux{,64}}.h
do
	cp -uv $file{,.orig}
	sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
		-e 's@/usr@/tools@g' $file.orig > $file
	echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 \"/tools/lib/\"
#define STANDARD_STARTFILE_PREFIX_2 \"\"' >> $file
	touch $file.orig
done" ${_logfile}
	build "	Fix stack protection" "sed -e '/m64=/s/lib64/lib/' -i.orig gcc/config/i386/t-linux64" ${_logfile}
	build "	Change directory: ../build" "pushd ../build" ${_logfile}
	build "	Configure" "../${_pkgname}-${_pkgver}/configure --target=${LFS_TGT} --prefix=/tools --with-glibc-version=2.11 --with-sysroot=${LFS} --with-newlib --without-headers --with-local-prefix=/tools --with-native-system-header-dir=/tools/include --disable-nls--disable-shared --disable-multilib --disable-decimal-float --disable-threads --disable-libatomic --disable-libgomp --disable-libquadmath --disable-libssp --disable-libvtv --disable-libstdcxx --enable-languages=c,c++" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_inux_headers() {
	local	_pkgname="linux"
	local	_pkgver="5.12"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	make mrproper" "make mrproper" ${_logfile}
	build "	make headers" "make headers" ${_logfile}
	build "	find usr/include -name '.*' -delete" "find usr/include -name '.*' -delete" ${_logfile}
	build "	rm usr/include/Makefile" "rm usr/include/Makefile" ${_logfile}
	build "	cp -rv usr/include/* /tools/include" "cp -rv usr/include/* /tools/include" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_glibc() {
	local	_pkgname="glibc"
	local	_pkgver="2.33"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Create work directory" "install -vdm 755 ../build" ${_logfile}
	build "	Change directory: ../build" "pushd ../build" ${_logfile}
	build "	Configure" "../${_pkgname}-${_pkgver}/configure --prefix=/tools --host=${LFS_TGT} --build=$(../scripts/config.guess) --enable-kernel=3.2 --with-headers=/tools/include" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	msg_line "       Checking glibc for sanity: "
	echo 'int main(){}' > dummy.c
	${LFS_TGT}-gcc dummy.c
	retval=$(readelf -l a.out | grep ': /tools')
	rm -v dummy.c a.out
	retval=${retval##*: }	# strip [Requesting program interpreter: 
	retval=${retval%]}	# strip ]
	case "${retval}" in
		"/tools/lib/ld-linux.so.2")		msg_success ;;
		"/tools/lib64/ld-linux-x86-64.so.2")	msg_success ;;
		*)					msg_line "       Glibc is insane: "msg_failure ;;
	esac
	>  ${_complete}
	return 0
}
tools_gcc-libstdc() {
	local	_pkgname="gcc"
	local	_pkgver="10.2.0"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Create work directory" "install -vdm 755 ../build" ${_logfile}
	build "	Change directory: ../build" "pushd ../build" ${_logfile}
	build "	Configure" "../gcc-10.2.0/libstdc++-v3/configure --host=${LFS_TGT} --prefix=/tools --disable-multilib --disable-nls --disable-libstdcxx-threads --disable-libstdcxx-pch --with-gxx-include-dir=/tools/${LFS_TGT}/include/c++/10.2.0" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_binutils_pass2() {
	local	_pkgname="binutils"
	local	_pkgver="2.26.1"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Create work directory" "install -vdm 755 ../build" ${_logfile}
	build "	Change directory: ../build" "pushd ../build" ${_logfile}
	build "	Configure" "CC=${LFS_TGT}-gcc AR=${LFS_TGT}-ar RANLIB=${LFS_TGT}-ranlib ../${_pkgname}-${_pkgver}/configure --prefix=/tools --disable-nls --disable-werror --with-lib-path=/tools/lib --with-sysroot" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	make -C ld clean" "make -C ld clean" ${_logfile}
	build "	make -C ld LIB_PATH=/usr/lib:/lib" "make -C ld LIB_PATH=/usr/lib:/lib" ${_logfile}
	build "	cp -v ld/ld-new /tools/bin" "cp -v ld/ld-new /tools/bin" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_gcc_pass2() {
	local	_pkgname="gcc"
	local	_pkgver="10.2.0"
	local	_pwd=${PWD}/BUILD
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	unpack "${PWD}" "mpfr-4.1.0"
	unpack "${PWD}" "gmp-6.2.1"
	unpack "${PWD}" "mpc-1.2.1"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Fixing limits" "cat gcc/limitx.h gcc/glimits.h gcc/limity.h > `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h" ${_logfile}
	build "	Fixing headers" 'for file in gcc/config/{linux,i386/linux{,64}}.h; do cp -uv $file{,.orig};sed -e "s@/lib\(64\)\?\(32\)\?/ld@/tools&@g" -e "s@/usr@/tools@g" $file.orig > $file;printf "\n%s\n%s\n%s\n%s\n\n" "#undef STANDARD_STARTFILE_PREFIX_1" "#undef STANDARD_STARTFILE_PREFIX_2" "#define STANDARD_STARTFILE_PREFIX_1 \"/tools/lib/\"" "#define STANDARD_STARTFILE_PREFIX_2 \"\" ">> $file;touch $file.orig;done' ${_logfile}
	build "	sed -e '/m64=/s/lib64/lib/'  -i.orig gcc/config/i386/t-linux64" "sed -e '/m64=/s/lib64/lib/'  -i.orig gcc/config/i386/t-linux64" ${_logfile}
	build "	Symlinking gmp" " ln -vs ../gmp-6.2.1  gmp" ${_logfile}
	build "	Symlinking mpc" " ln -vs ../mpc-1.2.1  mpc" ${_logfile}
	build "	Symlinking mpfr" "ln -vs ../mpfr-4.1.0 mpfr" ${_logfile}
	build "	Create work directory" "install -vdm 755 ../build" ${_logfile}
	build "	Change directory: ../build" "pushd ../build" ${_logfile}
	build "	Configure" "CC=${LFS_TGT}-gcc CXX=${LFS_TGT}-g++ AR=${LFS_TGT}-ar RANLIB=${LFS_TGT}-ranlib ../${_pkgname}-${_pkgver}/configure --prefix=/tools --with-local-prefix=/tools --with-native-system-header-dir=/tools/include --enable-languages=c,c++ --disable-libstdcxx-pch --disable-multilib --disable-bootstrap --disable-libgomp" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	ln -sv gcc /tools/bin/cc" "ln -sv gcc /tools/bin/cc" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	msg_line "	Checking glibc for sanity: "
	echo 'int main(){}' > dummy.c
	cc dummy.c
	retval=$(readelf -l a.out | grep ': /tools')
	rm dummy.c a.out
	retval=${retval##*: }	# strip [Requesting program interpreter: 
	retval=${retval%]}	# strip ]
	case "${retval}" in
		"/tools/lib/ld-linux.so.2")	     msg_success ;;
		"/tools/lib64/ld-linux-x86-64.so.2") msg_success ;;
		*)					msg_line "       GCC is insane: "msg_failure ;;
	esac
	>  ${_complete}
	return 0
}
tools_tcl() {
	local	_pkgname="tcl"
	local	_pkgver="8.6.11"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}${_pkgver}-src"
	build "	Change directory: ${_pkgname}${_pkgver}/unix" "pushd ${_pkgname}${_pkgver}/unix" ${_logfile}
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Installing Headers" "make install-private-headers" ${_logfile}
	build "	chmod -v u+w /tools/lib/libtcl8.6.so" "chmod -v u+w /tools/lib/libtcl8.6.so" ${_logfile}
	build "	make install-private-headers" "make install-private-headers" ${_logfile}
	build "	ln -sv tclsh8.6 /tools/bin/tclsh" " ln -sv tclsh8.6 /tools/bin/tclsh" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_expect() {
	local	_pkgname="expect"
	local	_pkgver="5.45"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}${_pkgver}"
	build "	Change directory: ${_pkgname}${_pkgver}" "pushd ${_pkgname}${_pkgver}" ${_logfile}
	build "	cp -v configure{,.orig}" "cp -v configure{,.orig}" ${_logfile}
	build "	sed 's:/usr/local/bin:/bin:' configure.orig > configure" "sed 's:/usr/local/bin:/bin:' configure.orig > configure" ${_logfile}
	build "	Configure" "./configure --prefix=/tools --with-tcl=/tools/lib --with-tclinclude=/tools/include" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" 'make SCRIPTS="" install' ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_dejagnu() {
	local	_pkgname="dejagnu"
	local	_pkgver="1.6.2"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_m4() {
	local	_pkgname="m4"
	local	_pkgver="1.4.18"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	sed -i 's/IO_ftrylockfile/IO_EOF_SEEN/' lib/*.c" "sed -i 's/IO_ftrylockfile/IO_EOF_SEEN/' lib/*.c" ${_logfile}
	build "	echo "#define _IO_IN_BACKUP 0x100" >> lib/stdio-impl.h" "echo "#define _IO_IN_BACKUP 0x100" >> lib/stdio-impl.h" ${_logfile}
	build "	Configure" "PKG_CONFIG= ./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_ncurses() {
	local	_pkgname="ncurses"
	local	_pkgver="6.2"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	sed -i s/mawk// configure" "sed -i s/mawk// configure" ${_logfile}
	build "	Configure" "../${_pkgname}-${_pkgver}/configure --prefix=/tools --with-shared --without-debug --without-ada --enable-widec --enable-overwrite" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	ln -s libncursesw.so /tools/lib/libncurses.so" "ln -s libncursesw.so /tools/lib/libncurses.so" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_bash() {
	local	_pkgname="bash"
	local	_pkgver="5.1"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Configure" "./configure --prefix=/tools --without-bash-malloc" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	ln -sv bash /tools/bin/sh" "ln -sv bash /tools/bin/sh" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_bison() {
local	_pkgname="bison"
	local	_pkgver="3.7.6"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_bzip2() {
local	_pkgname="bzip2"
	local	_pkgver="1.0.8"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	make -f Makefile-libbz2_so" "make -f Makefile-libbz2_so" ${_logfile}
	build "	make clean" "make clean" ${_logfile}
	build "	Make" "make" ${_logfile}
	build "	Install" "make PREFIX=/tools install" ${_logfile}
	build "	cp -v bzip2-shared /tools/bin/bzip2" "cp -v bzip2-shared /tools/bin/bzip2" ${_logfile}
	build "	cp -av libbz2.so* /tools/lib" "cp -av libbz2.so* /tools/lib" ${_logfile}
	build "	ln -sv libbz2.so.1.0 /tools/lib/libbz2.so" "ln -sv libbz2.so.1.0 /tools/lib/libbz2.so" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_coreutils() {
	local	_pkgname="coreutils"
	local	_pkgver="8.32"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Configure" "./configure --prefix=/tools --enable-install-program=hostname" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_diffutils() {
	local	_pkgname="diffutils"
	local	_pkgver="3.7"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_file() {
	local	_pkgname="file"
	local	_pkgver="5.40"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_findutils() {
	local	_pkgname="findutils"
	local	_pkgver="4.8.0"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_gawk() {
	local	_pkgname="gawk"
	local	_pkgver="5.1.0"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_gettext() {
	local	_pkgname="gettext"
	local	_pkgver="0.21"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Configure" "./configure --disable-shared" ${_logfile}
	build "	Make" "make" ${_logfile}
	build "	Install" "cp -v gettext-tools/src/{msgfmt,msgmerge,xgettext} /tools/bin" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_grep() {
	local	_pkgname="grep"
	local	_pkgver="3.6"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_gzip() {
	local	_pkgname="gzip"
	local	_pkgver="1.10"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_make() {
	local	_pkgname="make"
	local	_pkgver="4.3"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "./configure --prefix=/tools --without-guile" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_patch() {
	local	_pkgname="patch"
	local	_pkgver="2.7.6"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_perl() {
	local	_pkgname="perl"
	local	_pkgver="5.32.1"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "sh Configure -des -Dprefix=/tools -Dlibs=-lm" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile} 
	build "	cp -v perl cpan/podlators/scripts/pod2man /tools/bin" "cp -v perl cpan/podlators/scripts/pod2man /tools/bin" ${_logfile}
	build "	mkdir -pv /tools/lib/perl5/5.32.1" "mkdir -pv /tools/lib/perl5/5.32.1" ${_logfile}
	build "	cp -Rv lib/* /tools/lib/perl5/5.32.1" "cp -Rv lib/* /tools/lib/perl5/5.32.1" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_python() {
	local	_pkgname="Python"
	local	_pkgver="3.9.4"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	sed -i '/def add_multiarch_paths/a \        return' setup.py" "sed -i '/def add_multiarch_paths/a \        return' setup.py" ${_logfile}
	build "	Configure" "./configure --prefix=/tools --without-ensurepip" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_sed() {
	local	_pkgname="sed"
	local	_pkgver="4.8"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_tar() {
	local	_pkgname="tar"
	local	_pkgver="1.34"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_texinfo() {
	local	_pkgname="texinfo"
	local	_pkgver="6.7"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_util_linux() {
	local	_pkgname="util-linux"
	local	_pkgver="2.36.2"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "--prefix=/tools --without-python --disable-makeinstall-chown --without-systemdsystemunitdir --without-ncurses PKG_CONFIG=''" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_xz() {
	local	_pkgname="xz"
	local	_pkgver="5.2.5"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_stripping() {
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build 'strip --strip-debug /tools/lib/*' 'strip --strip-debug /tools/lib/* || true' ${_logfile}
	build '/usr/bin/strip --strip-unneeded /tools/{,s}bin/*' '/usr/bin/strip --strip-unneeded /tools/{,s}bin/* || true' ${_logfile}
	build 'rm -rf /tools/{,share}/{info,man,doc}' 'rm -rf /tools/{,share}/{info,man,doc}' ${_logfile}
	build 'find /tools/{lib,libexec} -name \*.la -delete' 'find /tools/{lib,libexec} -name \*.la -delete' ${_logfile}
	>  ${_complete}
	return 0
}
tools_changingowner() {
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	chown -R root:root $LFS/tools" "su -c 'chown -R root:root /mnt/lfs/tools'" ${_logfile}
	>  ${_complete}
	return 0
}
#
#	Add rpm to tool chain
#
tools_zlib() {
	local	_pkgname="zlib"
	local	_pkgver="1.2.11"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "./configure --prefix=/tools" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_nspr() {
	local _pkgname="nspr"
	local _pkgver="4.30"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	cd nspr
	sed -ri 's#^(RELEASE_BINS =).*#\1#' pr/src/misc/Makefile.in  || die "${FUNCNAME}: sed: FAILURE"
	sed -i 's#$(LIBRARY) ##'  config/rules.mk   || die "${FUNCNAME}: sed: FAILURE"
	build "	Configure" "PKG_CONFIG_PATH="/tools/lib/pkgconfig" ./configure --prefix=/tools --with-mozilla --with-pthreads $([ "$(uname -m)" = "x86_64" ] && echo --enable-64bit)" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_nss() {
	local _pkgname="nss"
	local _pkgver="3.64"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Patch" "patch -Np1 -i ../../SOURCES/nss-3.64-standalone-1.patch" ${_logfile}
	cd nss
	build "	Make" "make BUILD_OPT=1 NSPR_INCLUDE_DIR=/tools/include/nspr USE_SYSTEM_ZLIB=1 ZLIB_LIBS=-lz $([ "$(uname -m)" = "x86_64" ] && echo USE_64=1) -j1" ${_logfile}
	cd ../dist
	build "	install -vdm 755 /tools/bin" "install -vdm 755 /tools/bin" ${_logfile}
	build "	install -vdm 755 /tools/lib/pkgconfig" "install -vdm 755 /tools/lib/pkgconfig" ${_logfile}
	build "	install -vdm 755 /tools/include" "install -vdm 755 /tools/include" ${_logfile}
	build "	install -v -m755 Linux*/lib/*.so /tools/lib" "install -v -m755 Linux*/lib/*.so /tools/lib" ${_logfile}
	build "	install -v -m644 Linux*/lib/{*.chk,libcrmf.a} /tools/lib" "install -v -m644 Linux*/lib/{*.chk,libcrmf.a} /tools/lib" ${_logfile}
	build "	cp -v -RL {public,private}/nss/* /tools/include" "cp -v -RL {public,private}/nss/* /tools/include" ${_logfile}
	build "	install -v -m755 Linux*/bin/{certutil,nss-config,pk12util} /tools/bin" "install -v -m755 Linux*/bin/{certutil,nss-config,pk12util} /tools/bin" ${_logfile}
	build "	install -v -m644 Linux*/lib/pkgconfig/nss.pc  /tools/lib/pkgconfig" "install -v -m644 Linux*/lib/pkgconfig/nss.pc  /tools/lib/pkgconfig" ${_logfile}
	build "	sed -i 's|usr|tools|' /tools/lib/pkgconfig/nss.pc" "sed -i 's|usr|tools|' /tools/lib/pkgconfig/nss.pc" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_popt() {
	local _pkgname="popt"
	local _pkgver="1.18"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}	
	build "	Configure" "./configure --prefix=/tools --disable-static" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_readline() {
	local _pkgname="readline"
	local _pkgver="6.3"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	sed -i '/MV.*old/d' Makefile.in" "sed -i '/MV.*old/d' Makefile.in" ${_logfile}
	build "	sed -i '/{OLDSUFF}/c:' support/shlib-install" "sed -i '/{OLDSUFF}/c:' support/shlib-install" ${_logfile}
	build "	Configure" "PKG_CONFIG_PATH='/tools/lib/pkgconfig' ./configure --prefix=/tools --libdir=/tools/lib --with-curses=/tools/lib" ${_logfile}
	build "	Make" "make ${MKFLAGS} SHLIB_LIBS=-lncursesw" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_elfutils() {
	local _pkgname="elfutils"
	local _pkgver="0.161"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	build "	Configure" 'PKG_CONFIG_PATH="/tools/lib/pkgconfig" ./configure --prefix=/tools --program-prefix="eu-" ' ${_logfile}
	build "	Make" "make ${MKFLAGS} SHLIB_LIBS=-lncursesw" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
tools_rpm() {
	local _pkgname="rpm"
	local _pkgver="4.11.2"
	local	_complete="${PWD}/LOGS/${FUNCNAME}.completed"
	local	_logfile="${PWD}/LOGS/${FUNCNAME}.log"
	[ -e ${_complete} ] && { msg "${FUNCNAME}: SKIPPING";return 0; } || msg "${FUNCNAME}: Building"
	> ${_logfile}
	build "	Clean build directory" 'rm -rf BUILD/*' ${_logfile}
	build "	Change directory: BUILD" "pushd BUILD" ${_logfile}
	unpack "${PWD}" "${_pkgname}-${_pkgver}"
	build "	Change directory: ${_pkgname}-${_pkgver}" "pushd ${_pkgname}-${_pkgver}" ${_logfile}
	unpack "${PWD}" "db-6.1.19"
	build "	ln -vs db-6.1.19 db" "ln -vs db-6.1.19 db" ${_logfile}
	build "	Configure" "PKG_CONFIG_PATH=/tools/lib/pkgconfig CPPFLAGS='-I/tools/include -I/tools/include/nspr' ./configure --prefix=/tools --disable-static --disable-dependency-tracking --without-lua" ${_logfile}
	build "	Make" "make ${MKFLAGS}" ${_logfile}
	build "	Install" "make install" ${_logfile}
	build "	install -dm 755 /tools/etc/rpm" "install -dm 755 /tools/etc/rpm" ${_logfile}
	build "	rm -v/tools/bin/{rpmquery,rpmverify}" "rm -v /tools/bin/{rpmquery,rpmverify}" ${_logfile}
	build "	ln -vsf rpm /tools/bin/rpmquery" "ln -vsf rpm /tools/bin/rpmquery" ${_logfile}
	build "	ln -vsf rpm /tools/bin/rpmverify" "ln -vsf rpm /tools/bin/rpmverify" ${_logfile}
	build "	install -vm 755 ${LFS}${PARENT}/macros /tools/etc/rpm" "install -vm 755 ${LFS}${PARENT}/macros /tools/etc/rpm" ${_logfile}
	build "	Restore directory" "popd " /dev/null
	build "	Restore directory" "popd " /dev/null
	>  ${_complete}
	return 0
}
#
#	Main line	
#
msg "Building Chapter 5 Tool chain"
[ "lfs" != $(whoami) ] && die "	Not lfs user: FAILURE"
[ -z "${LFS_TGT}" ]  && die "	Environment not set: FAILURE"
[ ${PATH} = "/tools/bin:/bin:/usr/bin" ] || die "Path not set: FAILURE"

chapter-05-04	#	5.4.  Binutils-2.36.1 - Pass 1
chapter-05-05	#	5.5.  GCC-10.2.0 - Pass 1
chapter-05-06	#	5.6.  Linux-5.12 API Headers
chapter-05-07	#	5.7.  Glibc-2.33
chapter-05-08	#	5.8.  Libstdc++ from GCC-10.2.0
chapter-05-09	#	5.9.  Binutils-2.36.1 - Pass 2
chapter-05-10	#	5.10. GCC-10.2.0 - Pass 2
chapter-05-11	#	5.11. Tcl-8.6.11
chapter-05-12	#	5.12. Expect-5.45.4
chapter-05-13	#	5.13. DejaGNU-1.6.2
chapter-05-14	#	5.14. M4-1.4.18
chapter-05-15	#	5.15. Ncurses-6.2
chapter-05-16	#	5.16. Bash-5.1
chapter-05-17	#	5.17. Bison-3.7.2
chapter-05-18	#	5.18. Bzip2-1.0.8
chapter-05-19	#	5.19. Coreutils-8.32
chapter-05-20	#	5.20. Diffutils-3.7
chapter-05-21	#	5.21. File-5.39
chapter-05-22	#	5.22. Findutils-4.7.0
chapter-05-23	#	5.23. Gawk-5.0.1
chapter-05-24	#	5.24. Gettext-0.20.1
chapter-05-25	#	5.25. Grep-3.4
chapter-05-26	#	5.26. Gzip-1.10
chapter-05-27	#	5.27. Make-4.3
chapter-05-28	#	5.28. Patch-2.7.6
chapter-05-29	#	5.29. Perl-5.30.1
chapter-05-30	#	5.30. Python-3.9.4
chapter-05-31	#	5.31. Sed-4.8
chapter-05-32	#	5.32. Tar-1.32
chapter-05-33	#	5.33. Texinfo-6.7
chapter-05-34	#	5.34. Util-linux-2.35.1
chapter-05-35	#	5.35. Xz-5.2.4
#	The following packages comprise the package management system RPM
chapter-05-zlib		#
chapter-05-nspr		#
chapter-05-nss		#
chapter-05-popt		#
chapter-05-readline	#
chapter-05-elfutils	#
chapter-05-rpm		#
#	The following are not used
#	chapter-05-35	#	5.35. Stripping
#	chapter-05-36	#	5.36. Changing Ownership
exit 0
